# Step 1: Import Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score

# Step 2: Load the Dataset
# Assuming you have a CSV file named 'mall_customers.csv'
data = pd.read_csv('mall_customers.csv')

# Step 3: Explore the Data
print(data.head())
print(data.describe())
print(data.info())

# Step 4: Data Preprocessing
# Select relevant features (for example: Annual Income and Spending Score)
X = data[['Annual Income (k$)', 'Spending Score (1-100)']]

# Step 5: Data Normalization
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Step 6: Determine the Optimal Number of Clusters (Elbow Method)
inertia = []
silhouette_scores = []
k_values = range(2, 11)

for k in k_values:
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(X_scaled)
    inertia.append(kmeans.inertia_)
    silhouette_scores.append(silhouette_score(X_scaled, kmeans.labels_))

# Plot Elbow Method
plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
plt.plot(k_values, inertia, marker='o')
plt.title('Elbow Method')
plt.xlabel('Number of Clusters')
plt.ylabel('Inertia')

# Plot Silhouette Scores
plt.subplot(1, 2, 2)
plt.plot(k_values, silhouette_scores, marker='o')
plt.title('Silhouette Scores')
plt.xlabel('Number of Clusters')
plt.ylabel('Silhouette Score')
plt.show()

# Step 7: Apply K-means Clustering
# Choose the optimal number of clusters (for example, 5)
optimal_k = 5
kmeans = KMeans(n_clusters=optimal_k, random_state=42)
clusters = kmeans.fit_predict(X_scaled)

# Step 8: Add Cluster Labels to the Original Data
data['Cluster'] = clusters

# Step 9: Visualize the Clusters
plt.figure(figsize=(10, 6))
sns.scatterplot(data=data, x='Annual Income (k$)', y='Spending Score (1-100)', hue='Cluster', palette='Set1')
plt.title('Customer Segments')
plt.xlabel('Annual Income (k$)')
plt.ylabel('Spending Score (1-100)')
plt.legend(title='Cluster')
plt.show()

# Optional: Print cluster centers
cluster_centers = scaler.inverse_transform(kmeans.cluster_centers_)
print('Cluster Centers (Original Scale):')
print(cluster_centers)
